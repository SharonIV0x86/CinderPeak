name: Build and Test

on:
  push:
    branches:
      - main
      - 'feat/**'
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Debug, Release]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v1
      with:
        cmake-version: '3.20'

    - name: Configure CMake
      run: cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }}

    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure --build-config ${{ matrix.build_type }}

  format-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install clang-format
        run: sudo apt-get update && sudo apt-get install -y clang-format

      - name: Check formatting
        run: |
          clang-format --version
          # Check C++ files for formatting compliance
          find . -name '*.cpp' -o -name '*.hpp' | xargs clang-format --dry-run --Werror

  static-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install clang-tidy
        run: sudo apt-get update && sudo apt-get install -y clang-tidy

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: '3.20'

      - name: Configure CMake with compile commands
        run: cmake -S . -B build -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Run clang-tidy
        run: |
          # Run clang-tidy on source files
          find src -name '*.cpp' -o -name '*.hpp' | xargs clang-tidy -p build

